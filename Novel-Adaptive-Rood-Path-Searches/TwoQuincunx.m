

function OutQuincunx = TwoQuincunx(Input)

[s1,s2] = size(Input); % 16x16 expected
OutQuincunx = zeros(8,16); % 8x8 pattern

for i = 1:4
    if i == 1
        I = Input(1:8,1:8); % Up-left
        OutQuincunx(1:4,1:8) = [ I(1,1),I(2,2),I(1,3),I(2,4),I(1,5),I(2,6),I(1,7),I(2,8);
                               I(3,1),I(4,2),I(3,3),I(4,4),I(3,5),I(4,6),I(3,7),I(4,8);
                               I(5,1),I(6,2),I(5,3),I(6,4),I(5,5),I(6,6),I(5,7),I(6,8);
                               I(7,1),I(8,2),I(7,3),I(8,4),I(7,5),I(8,6),I(7,7),I(8,8);];
    elseif i ==2
        I = Input(1:8,9:16); % Up-right
        OutQuincunx(1:4,9:16) = [I(1,1),I(2,2),I(1,3),I(2,4),I(1,5),I(2,6),I(1,7),I(2,8);
                               I(3,1),I(4,2),I(3,3),I(4,4),I(3,5),I(4,6),I(3,7),I(4,8);
                               I(5,1),I(6,2),I(5,3),I(6,4),I(5,5),I(6,6),I(5,7),I(6,8);
                               I(7,1),I(8,2),I(7,3),I(8,4),I(7,5),I(8,6),I(7,7),I(8,8);];
    elseif i ==3
        I = Input(9:16,1:8); % Down-left
        OutQuincunx(5:8,1:8) = [I(1,1),I(2,2),I(1,3),I(2,4),I(1,5),I(2,6),I(1,7),I(2,8);
                               I(3,1),I(4,2),I(3,3),I(4,4),I(3,5),I(4,6),I(3,7),I(4,8);
                               I(5,1),I(6,2),I(5,3),I(6,4),I(5,5),I(6,6),I(5,7),I(6,8);
                               I(7,1),I(8,2),I(7,3),I(8,4),I(7,5),I(8,6),I(7,7),I(8,8);];
    else % i == 4
        I = Input(9:16,9:16); % Down-left
        OutQuincunx(5:8,9:16) = [I(1,1),I(2,2),I(1,3),I(2,4),I(1,5),I(2,6),I(1,7),I(2,8);
                                I(3,1),I(4,2),I(3,3),I(4,4),I(3,5),I(4,6),I(3,7),I(4,8);
                                I(5,1),I(6,2),I(5,3),I(6,4),I(5,5),I(6,6),I(5,7),I(6,8);
                                I(7,1),I(8,2),I(7,3),I(8,4),I(7,5),I(8,6),I(7,7),I(8,8);];
        
    end

        
end


end